{
  "version": 3,
  "sources": ["../src/commands.ts"],
  "sourcesContent": ["import { boundMethod } from 'autobind-decorator';\n\nimport { ApplicationCommandPermissionData, CacheType, Collection, CommandInteraction, Interaction } from 'discord.js';\nimport { SlashCommandBuilder } from '@discordjs/builders';\nimport { REST } from '@discordjs/rest';\nimport { Routes } from 'discord-api-types/v9';\n\nimport type { DiscordAdapter } from './main';\nimport { i18n } from './lib/i18n';\nimport { isDeepStrictEqual } from 'node:util';\n\nexport interface CommandObjectConfig {\n  id: string;\n  alias: string;\n  name: string;\n  get: boolean;\n  set: boolean;\n}\n\n/**\n * Class for discord slash commands handling\n */\nexport class DiscordAdapterSlashCommands {\n\n  /**\n   * Reference to the adapter instance.\n   */\n  private adapter: DiscordAdapter;\n\n  /**\n   * Discord REST api interface.\n   */\n  private rest: REST = new REST({ version: '9' });\n\n  /**\n   * Command name for the get state command.\n   */\n  private cmdGetStateName: string = 'iob-get';\n\n  /**\n   * Command name for the set state command.\n   */\n  private cmdSetStateName: string = 'iob-set';\n\n  /**\n   * If commands are fully registered including their permissions.\n   */\n  private registerCommandsDone: boolean = false;\n\n  private lastCommandsJson: any[] | null = null;\n\n  private commandObjectConfig: Collection<string, CommandObjectConfig> = new Collection();\n\n  private triggerDelayedRegisterSlashCommandsTimeout: ioBroker.Timeout | null = null;\n\n  constructor (adapter: DiscordAdapter) {\n    this.adapter = adapter;\n  }\n\n  /**\n   * When the adapter is Ready.\n   * Called by `adapter.onReady()` after some basic checks.\n   */\n  public async onReady (): Promise<void> {\n    // apply custom command names if configured\n    if (this.adapter.config.cmdGetStateName) {\n      this.cmdGetStateName = this.adapter.config.cmdGetStateName;\n    }\n    if (this.adapter.config.cmdSetStateName) {\n      this.cmdSetStateName = this.adapter.config.cmdSetStateName;\n    }\n\n    // setup REST interface\n    this.rest.setToken(this.adapter.config.token);\n\n    // check if commands are enabled\n    if (!this.adapter.config.enableCommands) {\n      return;\n    }\n\n    // setup interaction handler for commands\n    if (!this.adapter.client) {\n      throw new Error('Tried to setup interaction handler for commands, but client is not initialized!');\n    }\n    this.adapter.client.on('interactionCreate', this.onInteractionCreate);\n  }\n\n  /**\n   * Register the commands on discord, if enabled.\n   */\n  public async registerSlashCommands (): Promise<void> {\n    this.registerCommandsDone = false;\n\n    if (!this.adapter.client?.user) {\n      throw new Error('Discord client not available');\n    }\n\n    // check if commands are enabled and if not remove set commands\n    if (!this.adapter.config.enableCommands) {\n      this.adapter.log.debug('Commands not enabled');\n\n      // check for commands and remove them all\n      for (const [, guild] of this.adapter.client.guilds.cache) {\n        const guildCommands = await guild.commands.fetch();\n        if (guildCommands.size > 0) {\n          this.adapter.log.debug(`Currently ${guildCommands.size} commands registered for server ${guild.name}. Removing them...`);\n          try {\n            await this.rest.put(Routes.applicationGuildCommands(this.adapter.client.user.id, guild.id), { body: [] });\n            this.adapter.log.info(`Removed commands for server ${guild.name} cause commands are not enabled`);\n          } catch (err) {\n            this.adapter.log.warn(`Error while removing registered commands for server ${guild.name}: ${err}`);\n          }\n        }\n      }\n\n      return;\n    }\n\n    const cmdGet = new SlashCommandBuilder()\n      .setName(this.cmdGetStateName)\n      .setDescription(i18n.getString('Get an ioBroker state value'));\n\n    const cmdSet = new SlashCommandBuilder()\n      .setName(this.cmdSetStateName)\n      .setDescription(i18n.getString('Set an ioBroker state value'));\n\n    // set default permissions depending on authorization settings\n    cmdGet.setDefaultPermission(!this.adapter.config.enableAuthorization);\n    cmdSet.setDefaultPermission(!this.adapter.config.enableAuthorization);\n\n    // add options\n    cmdGet.addStringOption((opt) => {\n      opt.setName('state')\n        .setDescription(i18n.getString('The ioBroker state to get'))\n        .setRequired(true);\n      for (const [, objCfg] of this.commandObjectConfig) {\n        if (objCfg.get) {\n          opt.addChoice(objCfg.name, objCfg.alias);\n        }\n      }\n      return opt;\n    });\n\n    cmdSet.addStringOption((opt) => {\n      opt.setName('state')\n        .setDescription(i18n.getString('The ioBroker state to set'))\n        .setRequired(true);\n      for (const [, objCfg] of this.commandObjectConfig) {\n        if (objCfg.set) {\n          opt.addChoice(objCfg.name, objCfg.alias);\n        }\n      }\n      return opt;\n    });\n    cmdSet.addStringOption((opt) => {\n      return opt.setName('value')\n        .setDescription(i18n.getString('The value to set'))\n        .setRequired(true);\n    });\n\n    // build commands array\n    const commands: SlashCommandBuilder[] = [\n      cmdGet,\n      cmdSet,\n    ];\n\n    const commandsJson = commands.map((cmd) => cmd.toJSON());\n\n    // only update the commands if something has changed\n    if (!isDeepStrictEqual(commandsJson, this.lastCommandsJson)) {\n      this.adapter.log.debug('Commands needs to be updated');\n\n      if (this.commandObjectConfig.size === 0) {\n        this.adapter.log.warn('Commands are enabled but not configured for any state object! Use the custom configuration of a state object to activate commands on it.');\n      }\n\n      const numGet = this.commandObjectConfig.filter((c) => c.get === true).size;\n      const numSet = this.commandObjectConfig.filter((c) => c.set === true).size;\n\n      // register commands for all servers of the bot (guild commands are applied instant and may have permissions per user set)\n      for (const [, guild] of this.adapter.client.guilds.cache) {\n        try {\n          await this.rest.put(Routes.applicationGuildCommands(this.adapter.client.user.id, guild.id), { body: commandsJson });\n\n          // fetch the current guild commands to be up to date\n          const guildCommands = await guild.commands.fetch();\n\n          // setup per user permissions is authorization is enabled\n          if (this.adapter.config.enableAuthorization) {\n            for (const [, gCmd] of guildCommands) {\n              try {\n                const permissions: ApplicationCommandPermissionData[] = [];\n                for (const au of this.adapter.config.authorizedUsers) {\n                  if ((gCmd.name === this.cmdGetStateName && au.getStates) || (gCmd.name === this.cmdSetStateName && au.setStates)) {\n                    permissions.push({\n                      id: au.userId,\n                      type: 'USER',\n                      permission: true,\n                    });\n                  }\n                }\n\n                await gCmd.permissions.set({ permissions });\n\n              } catch (err) {\n                this.adapter.log.warn(`Error while setting command permissions for server ${guild.name} command ${gCmd.name}: ${err}`);\n              }\n            }\n          }\n\n          this.adapter.log.info(`Registered commands for server ${guild.name} (id:${guild.id}) (get: ${numGet}, set: ${numSet})`);\n        } catch (err) {\n          this.adapter.log.warn(`Error registering commands for server ${guild.name} (id:${guild.id}): ${err}`);\n        }\n      }\n\n      // cache the commandsJson for the next call of `registerSlashCommands()`\n      this.lastCommandsJson = commandsJson;\n\n    } else {\n      this.adapter.log.debug('Commands seams to be up to date');\n    }\n\n    this.registerCommandsDone = true;\n  }\n\n  /**\n   * Setup an ioBroker object for discord slash commands.\n   * @param objId ID of the ioBroker object to set up.\n   * @param cfg Command configuration for the ioBroker object or null to remove a possibly existing configuration.\n   */\n  public setupCommandObject (objId: string, cfg: CommandObjectConfig | null): void {\n    // check if alias is already in use\n    if (cfg) {\n      const conflictingAlias = this.commandObjectConfig.find((coc) => coc.alias === cfg?.alias && coc.id !== cfg.id);\n      if (conflictingAlias) {\n        this.adapter.log.warn(`Command alias ${cfg.alias} of object ${cfg.id} already in use by object ${conflictingAlias.id}! ${cfg.id} will be ignored.`);\n        cfg = null;\n      }\n    }\n\n    // remove if commands are not enabled or alias conflict\n    if (!cfg) {\n      if (this.commandObjectConfig.has(objId)) {\n        this.commandObjectConfig.delete(objId);\n        this.triggerDelayedRegisterSlashCommands();\n      }\n      return;\n    }\n\n    // update only if changed\n    const currentCfg = this.commandObjectConfig.get(objId);\n    if (!isDeepStrictEqual(cfg, currentCfg)) {\n      this.adapter.log.debug(`Update command configuration for ${objId}: ${JSON.stringify(cfg)}`);\n      this.commandObjectConfig.set(objId, cfg);\n      this.triggerDelayedRegisterSlashCommands();\n    }\n  }\n\n  /**\n   * Initialize a delayed registration of the slash commands.\n   * Calls `registerSlashCommands()` five seconds after the last call of this method.\n   * If called again within the five seconds the timeout starts again.\n   *\n   * This is used to handle object changes better and concat multiple changed\n   * object configurations into a single API call.\n   *\n   * If the initial custom objects setup of the adapter isn't done, this method\n   * does nothing since the command registration is called during this explicit.\n   */\n  private triggerDelayedRegisterSlashCommands (): void {\n    // do nothing on init\n    if (!this.adapter.initialCustomObjectSetupDone) return;\n\n    if (this.triggerDelayedRegisterSlashCommandsTimeout) {\n      this.adapter.clearTimeout(this.triggerDelayedRegisterSlashCommandsTimeout);\n    }\n\n    this.adapter.setTimeout(() => {\n      this.triggerDelayedRegisterSlashCommandsTimeout = null;\n      this.adapter.log.debug('Starting delayed slash commands registration...');\n      this.registerSlashCommands();\n    }, 5000);\n  }\n\n  /**\n   * Handle interaction commands.\n   */\n  @boundMethod\n  private async onInteractionCreate (interaction: Interaction<CacheType>): Promise<void> {\n    // is it a command?\n    if (!interaction.isCommand()) return;\n\n    const { commandName, user } = interaction;\n\n    if (!this.registerCommandsDone) {\n      this.adapter.log.warn(`Got command ${commandName} but command registration is not done yet.`);\n      return;\n    }\n\n    this.adapter.log.debug(`Got command ${commandName} ${interaction.toJSON()}`);\n\n    switch (commandName) {\n      case this.cmdGetStateName:\n        // check user authorization (user should only be able to call the command if authorized but check it nevertheless to be sure)\n        if (this.adapter.checkUserAuthorization(user.id, { getStates: true })) {\n          // user authorized\n          await this.handleCmdGetState(interaction);\n        } else {\n          // user not authorized\n          this.adapter.log.warn(`User ${user.tag} (id:${user.id}) is not authorized to call /${commandName} commands!`);\n          interaction.reply(i18n.getString('You are not authorized to call this command!'));\n        }\n        break;\n\n      case this.cmdSetStateName:\n        // check user authorization (user should only be able to call the command if authorized but check it nevertheless to be sure)\n        if (this.adapter.checkUserAuthorization(user.id, { setStates: true })) {\n          // user authorized\n          await this.handleCmdSetState(interaction);\n        } else {\n          // user not authorized\n          this.adapter.log.warn(`User ${user.tag} (id:${user.id}) is not authorized to call /${commandName} commands!`);\n          interaction.reply(i18n.getString('You are not authorized to call this command!'));\n        }\n        break;\n\n      default:\n        this.adapter.log.warn(`Got unknown command ${commandName}!`);\n        interaction.reply(i18n.getString('Unknown command!'));\n    }\n  }\n\n  /**\n   * Handler for \"get state\" slash commands.\n   * @param interaction The interaction which triggered this.\n   */\n  private async handleCmdGetState (interaction: CommandInteraction<CacheType>): Promise<void> {\n    await interaction.deferReply();\n\n    const objAlias = interaction.options.getString('state');\n\n    // find the config for the requested object\n    const cfg = this.commandObjectConfig.find((coc) => coc.alias === objAlias);\n    if (!cfg) {\n      await interaction.editReply(i18n.getString('Object `%s` not found!', objAlias || ''));\n      return;\n    }\n\n    // get the object\n    const obj = await this.adapter.getForeignObjectAsync(cfg.id);\n    if (!obj) {\n      await interaction.editReply(i18n.getString('Object `%s` not found!', cfg.id));\n      return;\n    }\n    if (obj.type !== 'state') {\n      await interaction.editReply(i18n.getString('Object `%s` is not of type state!', cfg.id));\n      return;\n    }\n\n    // get the state\n    const state = await this.adapter.getForeignStateAsync(cfg.id);\n    if (!state) {\n      await interaction.editReply(i18n.getString('State `%s` not found!', cfg.id));\n      return;\n    }\n\n    // get the value depending on the state type\n    let val: string = '';\n\n    if (obj.common.role === 'date' && ((obj.common.type === 'string' && typeof state.val === 'string') || (obj.common.type === 'number' && typeof state.val === 'number'))) {\n      // date values\n      const d = new Date(state.val);\n      val = d.toLocaleString(i18n.language, { dateStyle: 'full', timeStyle: 'long' });\n\n    } else {\n      // non date values\n      switch (obj.common.type) {\n        case 'boolean':\n          if (state.val) {\n            val = obj.common.custom?.[this.adapter.namespace].commandsBooleanValueTrue || i18n.getString('true');\n          } else {\n            val = obj.common.custom?.[this.adapter.namespace].commandsBooleanValueFalse || i18n.getString('false');\n          }\n          break;\n\n        case 'number':\n          // number values\n          const decimals = obj.common.custom?.[this.adapter.namespace]?.commandsNumberDecimals || 0;\n          if (typeof state.val === 'number') {\n            val = state.val.toFixed(decimals);\n          } else if (state.val === null) {\n            val = '_NULL_';\n          } else {\n            val = state.val.toString() || 'NaN';\n          }\n          if (i18n.isFloatComma) {\n            val = val.replace('.', ',');\n          }\n          break;\n\n        default:\n          if (typeof state.val === 'string') {\n            val = state.val;\n          } else if (state.val === null) {\n            val = '_NULL_';\n          } else {\n            val = state.val.toString();\n          }\n      }\n    }\n\n    // add unit if defined in the object\n    const unit = obj.common.unit ? ` ${obj.common.unit}` : '';\n    const ack = obj.common.custom?.[this.adapter.namespace]?.commandsShowAckFalse && !state.ack ? ` (_${i18n.getString('not acknowledged')}_)` : '';\n\n    this.adapter.log.debug(`Get command for ${cfg.id} - ${val}${unit}${ack}`);\n\n    // send the value as reply to the user\n    try {\n      await interaction.editReply(`${cfg.name}: ${val}${unit}${ack}`);\n    } catch (err) {\n      this.adapter.log.warn(`Error sending interaction reply for /${this.cmdGetStateName} command! ${err}`);\n    }\n  }\n\n  /**\n   * Handler for \"set state\" slash commands.\n   * @param interaction The interaction which triggered this.\n   */\n  private async handleCmdSetState (interaction: CommandInteraction<CacheType>): Promise<void> {\n    interaction.deferReply();\n\n    // TODO: implement set command\n    interaction.editReply('Not supported yet.');\n  }\n}"],
  "mappings": "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",
  "names": []
}
