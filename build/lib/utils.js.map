{
  "version": 3,
  "sources": ["../../src/lib/utils.ts"],
  "sourcesContent": ["import { User } from 'discord.js';\nimport { basename } from 'node:path';\nimport { URL } from 'node:url';\n\ninterface BufferAndName {\n  buffer: Buffer;\n  name: string;\n}\n\n/**\n * Get a buffer and a file name from a possibly base64 encoded string.\n * @param base64String The possibly bas64 encoded data string.\n * @param name An optional file name.\n * @returns Object of `buffer` and `name` from the base64 string or null if no base64 string.\n */\nexport function getBufferAndNameFromBase64String (base64String: string, name?: string): BufferAndName | null {\n  // check for base64 encoded data\n  const b64match = /^data:([^/]+)\\/([^;]+);base64,([a-zA-Z0-9+/]+=*)$/.exec(base64String);\n  if (!b64match) {\n    return null;\n  }\n\n  // base64 encoded content\n  const buffer = Buffer.from(b64match[3], 'base64');\n\n  // guess a generic name from the mime type if no name provided\n  if (!name) {\n    name = `${b64match[1].replace(/\\W/g, '_')}.${b64match[2].replace(/\\W/g, '_')}`;\n  }\n\n  return {\n    buffer,\n    name,\n  };\n}\n\n/**\n * Get the basename of a path or URL to a file.\n * @param file Path or URL to a file.\n * @returns The basename of the file.\n */\nexport function getBasenameFromFilePathOrUrl (file: string): string {\n  if (/^\\w+:\\/\\//.exec(file)) {\n    try {\n      const url = new URL(file);\n      return basename(url.pathname);\n    } catch (_err) {\n      return basename(file);\n    }\n  } else {\n    return basename(file);\n  }\n}\n\n/**\n * Get the name of an ioBroker object.\n * The name in the common object may be a single string or an object containing\n * the translations. If it's an object, the 'en' translation will be used.\n * @param common The common object of an ioBroker object.\n * @returns The object name.\n */\nexport function getObjName (common: ioBroker.ObjectCommon): string {\n  if (typeof common.name === 'string') {\n    return common.name;\n  }\n\n  return common.name.en;\n}\n\n/**\n * Get the unique username of a discord user or the tag if no unique name is set.\n * @param user The discord user.\n * @returns The username or tag.\n */\nexport function userNameOrTag (user: User): string {\n  return user.discriminator === '0' ? user.username : user.tag;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,uBAAyB;AACzB,sBAAoB;AAab,SAAS,iCAAkC,cAAsB,MAAqC;AAE3G,QAAM,WAAW,oDAAoD,KAAK,YAAY;AACtF,MAAI,CAAC,UAAU;AACb,WAAO;AAAA,EACT;AAGA,QAAM,SAAS,OAAO,KAAK,SAAS,CAAC,GAAG,QAAQ;AAGhD,MAAI,CAAC,MAAM;AACT,WAAO,GAAG,SAAS,CAAC,EAAE,QAAQ,OAAO,GAAG,CAAC,IAAI,SAAS,CAAC,EAAE,QAAQ,OAAO,GAAG,CAAC;AAAA,EAC9E;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAOO,SAAS,6BAA8B,MAAsB;AAClE,MAAI,YAAY,KAAK,IAAI,GAAG;AAC1B,QAAI;AACF,YAAM,MAAM,IAAI,oBAAI,IAAI;AACxB,iBAAO,2BAAS,IAAI,QAAQ;AAAA,IAC9B,SAAS,MAAM;AACb,iBAAO,2BAAS,IAAI;AAAA,IACtB;AAAA,EACF,OAAO;AACL,eAAO,2BAAS,IAAI;AAAA,EACtB;AACF;AASO,SAAS,WAAY,QAAuC;AACjE,MAAI,OAAO,OAAO,SAAS,UAAU;AACnC,WAAO,OAAO;AAAA,EAChB;AAEA,SAAO,OAAO,KAAK;AACrB;AAOO,SAAS,cAAe,MAAoB;AACjD,SAAO,KAAK,kBAAkB,MAAM,KAAK,WAAW,KAAK;AAC3D;",
  "names": []
}
