{
  "version": 3,
  "sources": ["../../src/lib/utils.ts"],
  "sourcesContent": ["\ninterface BufferAndName {\n  buffer: Buffer;\n  name: string;\n}\n\n/**\n * Get a buffer and a file name from a possibly base64 encoded string.\n * @param base64String The possibly bas64 encoded data string.\n * @param name An optional file name.\n * @returns Object of `buffer` and `name` from the base64 string or null if no base64 string.\n */\nexport function getBufferAndNameFromBase64String (base64String: string, name?: string): BufferAndName | null {\n  // check for base64 encoded data\n  const b64match = base64String.match(/^data:([^/]+)\\/([^;]+);base64,([a-zA-Z0-9+/]+=*)$/);\n  if (!b64match) {\n    return null;\n  }\n\n  // base64 encoded content\n  const buffer = Buffer.from(b64match[3], 'base64');\n\n  // guess a generic name from the mime type if no name provided\n  if (!name) {\n    name = `${b64match[1].replace(/\\W/g, '_')}.${b64match[2].replace(/\\W/g, '_')}`;\n  }\n\n  return {\n    buffer,\n    name,\n  };\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAYO,0CAA2C,cAAsB,MAAqC;AAE3G,QAAM,WAAW,aAAa,MAAM,mDAAmD;AACvF,MAAI,CAAC,UAAU;AACb,WAAO;AAAA,EACT;AAGA,QAAM,SAAS,OAAO,KAAK,SAAS,IAAI,QAAQ;AAGhD,MAAI,CAAC,MAAM;AACT,WAAO,GAAG,SAAS,GAAG,QAAQ,OAAO,GAAG,KAAK,SAAS,GAAG,QAAQ,OAAO,GAAG;AAAA,EAC7E;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
