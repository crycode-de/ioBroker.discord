{
  "version": 3,
  "sources": ["../../src/lib/definitions.ts"],
  "sourcesContent": ["export const VALID_PRESENCE_STATUS_DATA = <const>['online', 'idle', 'dnd', 'invisible'];\n\nexport const ACTIVITY_TYPES = <const>['', 'Playing', 'Streaming', 'Listening', 'Watching', 'Custom', 'Competing'];\nexport type ActivityTypeNames = typeof ACTIVITY_TYPES[number];\n\nexport const VALID_ACTIVITY_TYPES = <const>['', 'Playing', 'Streaming', 'Listening', 'Watching', 'Competing'];\nexport type ValidActivityTypeNames = typeof VALID_ACTIVITY_TYPES[number];\n\n/**\n * Valid channel types.\n * @see discord-api-types/payloads/v10/channel.d.ts#304\n */\nexport type ChannelTypeNames = 'GuildText' | 'DM' | 'GuildVoice' | 'GroupDM' | 'GuildCategory' | 'GuildAnnouncement' | 'AnnouncementThread' | 'PublicThread' | 'PrivateThread' | 'GuildStageVoice' | 'GuildDirectory' | 'GuildForum' | 'GuildNews' | 'GuildNewsThread' | 'GuildPublicThread' | 'GuildPrivateThread';\n\nimport {\n  ApplicationCommandOptionType,\n  ChannelType,\n  MessageEditOptions,\n  MessageCreateOptions,\n  PresenceStatus,\n  PresenceStatusData,\n  Snowflake,\n} from 'discord.js';\n\nexport interface Text2commandMessagePayload {\n  text: string;\n  response?: string;\n}\n\nexport interface SetBotPresenceOptions {\n  status?: PresenceStatusData;\n  activityType?: ValidActivityTypeNames;\n  activityName?: string;\n}\n\nexport interface JsonServersMembersObj {\n  id: Snowflake;\n  tag: string;\n  displayName: string;\n  roles: string[];\n  joined: number | null;\n  voiceChannel: string;\n  voiceChannelId: Snowflake;\n  voiceSelfDeaf: boolean;\n  voiceServerDeaf: boolean;\n  voiceSelfMute: boolean;\n  voiceServerMute: boolean;\n}\n\nexport interface JsonServersChannelsObj {\n  id: Snowflake;\n  name: string;\n  memberCount: number;\n  members: {\n    id: Snowflake;\n    tag: string;\n    displayName: string;\n  }[];\n  type: ChannelType;\n}\n\nexport interface JsonUsersObj {\n  id: Snowflake;\n  tag: string;\n  activityName: string;\n  activityType: ActivityTypeNames;\n  avatarUrl: string;\n  bot: boolean;\n  status: PresenceStatus | '';\n}\n\nexport interface JsonMessageObj {\n  id: Snowflake;\n  content: string;\n  attachments: {\n    attachment: string;\n    name: string | null;\n    size: number;\n    id: Snowflake;\n  }[];\n  mentions: {\n    id: Snowflake;\n    tag: string;\n    displayName: string;\n  }[];\n  mentioned: boolean;\n  timestamp: number;\n  authorized: boolean;\n\n  author?: {\n    id: Snowflake;\n    tag: string;\n    displayName: string;\n  };\n}\n\nexport interface JsonSlashCommandObj {\n  interactionId: Snowflake;\n  commandName: string;\n  user: {\n    id: Snowflake;\n    tag: string;\n    displayName: string;\n  };\n  channelId: Snowflake;\n  serverId: Snowflake | null;\n  timestamp: number;\n  options: Record<string, JsonSlashCommandObjOption>;\n}\n\nexport interface JsonSlashCommandObjOption {\n  value: string | number | boolean | null;\n  type: ApplicationCommandOptionType | null;\n  user?: {\n    id: Snowflake;\n    tag: string;\n    bot: boolean;\n  };\n  member?: {\n    id: Snowflake;\n    displayName: string;\n    roles: { id: Snowflake, name: string }[];\n  };\n  role?: {\n    id: Snowflake;\n    name: string;\n  };\n  channel?: {\n    id: Snowflake;\n    name: string;\n    type: ChannelTypeNames;\n    lastMessageId: Snowflake | null;\n  };\n}\n\nexport interface UpdateUserPresenceResult {\n  status: PresenceStatus | '';\n  activityType: ActivityTypeNames;\n  activityName: string;\n}\n\nexport type CheckAuthorizationOpts = Partial<ioBroker.AdapterConfigAuthorizedFlags>;\n\n/**\n * Parameters needed to identify a message target.\n * One of the following is needed:\n * - `userId`\n * - `userTag`\n * - `serverId` and `channelId`\n */\nexport interface MessageTargetIdentifier {\n  serverId?: Snowflake;\n  channelId?: Snowflake;\n\n  userId?: Snowflake;\n  userTag?: Snowflake;\n}\n\n/**\n * Parameters needed to identify a message.\n */\nexport interface MessageIdentifier extends MessageTargetIdentifier {\n  messageId: Snowflake;\n}\n\n/**\n * Payload for a `sentTo(...)` `sendMessage` action.\n */\nexport interface SendToActionSendPayload extends MessageTargetIdentifier {\n  content: string | MessageCreateOptions;\n}\n\n/**\n * Payload for a `sentTo(...)` `editMessage` action.\n */\nexport interface SendToActionEditMessagePayload extends MessageIdentifier {\n  content: string | MessageEditOptions;\n}\n\n/**\n * Payload for a `sentTo(...)` `awaitMessageReaction` action.\n */\nexport interface SendToActionAwaitMessageReactionPayload extends MessageIdentifier {\n  timeout: number;\n  max?: number;\n}\n\n/**\n * Payload for a `sentTo(...)` `addReaction` action.\n */\nexport interface SendToActionAddReactionPayload extends MessageIdentifier {\n  emoji: string;\n}\n\n/**\n * Payload for `sentTo(...)` actions requiring a server.\n */\nexport interface SendToActionServerIdentifier {\n  serverId: Snowflake;\n}\n\n/**\n * Payload for `sentTo(...)` actions requiring a server channel.\n */\nexport interface SendToActionChannelIdentifier extends SendToActionServerIdentifier {\n  channelId: Snowflake;\n}\n\n/**\n * Payload for `sentTo(...)` actions requiring a user.\n */\nexport interface SendToActionUserIdentifier {\n  userId?: Snowflake;\n  userTag?: Snowflake;\n}\n\n/**\n * Payload for `sentTo(...)` actions requiring a server member.\n */\nexport interface SendToActionServerMemberIdentifier extends SendToActionServerIdentifier, SendToActionUserIdentifier {\n  // just extends\n}\n\n/**\n * Payload for a `sentTo(...)` `sendCustomCommandReply` action.\n */\nexport interface SendToActionSendCustomCommandReplyPayload {\n  interactionId: Snowflake;\n  content: string | MessageCreateOptions;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,MAAM,6BAAoC,CAAC,UAAU,QAAQ,OAAO,WAAW;AAE/E,MAAM,iBAAwB,CAAC,IAAI,WAAW,aAAa,aAAa,YAAY,UAAU,WAAW;AAGzG,MAAM,uBAA8B,CAAC,IAAI,WAAW,aAAa,aAAa,YAAY,WAAW;",
  "names": []
}
