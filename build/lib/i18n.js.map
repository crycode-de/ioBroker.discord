{
  "version": 3,
  "sources": ["../../src/lib/i18n.ts"],
  "sourcesContent": ["import de from '../../admin/i18n/de.json';\nimport en from '../../admin/i18n/en.json';\nimport es from '../../admin/i18n/es.json';\nimport fr from '../../admin/i18n/fr.json';\nimport it from '../../admin/i18n/it.json';\nimport nl from '../../admin/i18n/nl.json';\nimport pl from '../../admin/i18n/pl.json';\nimport pt from '../../admin/i18n/pt.json';\nimport ru from '../../admin/i18n/ru.json';\nimport zhCn from '../../admin/i18n/zh-cn.json';\n\ntype I18nObj = Partial<typeof en>;\ntype I18nKey = keyof I18nObj;\n\n/**\n * Internationalization class to handle translations.\n */\nclass I18n {\n\n  /**\n   * Language configured in `system.config` object.\n   */\n  public language: ioBroker.Languages = 'en';\n\n  /**\n   * If float numbers should be displayed using a comma instead of a dot.\n   */\n  public isFloatComma: boolean = false;\n\n  /**\n   * Get a translation object or a single string for a given translation key.\n   * Uses the i18n files in `admin/i18n`.\n   * @param key The key from `en.json`.\n   * @param args Array of strings to be inserted at `%s` in the translated strings.\n   */\n  public getStringOrTranslated (key: I18nKey, ...args: string[]): ioBroker.StringOrTranslated {\n    if (en[key]) {\n      return {\n        de: this.replacePlaceholders((de as I18nObj)[key] || key, ...args),\n        en: this.replacePlaceholders((en as I18nObj)[key] || key, ...args),\n        es: this.replacePlaceholders((es as I18nObj)[key] || key, ...args),\n        fr: this.replacePlaceholders((fr as I18nObj)[key] || key, ...args),\n        it: this.replacePlaceholders((it as I18nObj)[key] || key, ...args),\n        nl: this.replacePlaceholders((nl as I18nObj)[key] || key, ...args),\n        pl: this.replacePlaceholders((pl as I18nObj)[key] || key, ...args),\n        pt: this.replacePlaceholders((pt as I18nObj)[key] || key, ...args),\n        ru: this.replacePlaceholders((ru as I18nObj)[key] || key, ...args),\n        'zh-cn': this.replacePlaceholders((zhCn as I18nObj)[key] || key, ...args),\n      };\n    } else {\n      return key;\n    }\n  }\n\n  /**\n   * Get a translated string string for a given translation key and language.\n   * Uses the i18n files in `admin/i18n`.\n   * @param key The key from `en.json`.\n   * @param args Array of strings to be inserted at `%s` in the translated string.\n   */\n  public getString (key: I18nKey, ...args: string[]): string {\n    let str: string;\n    switch (this.language) {\n      case 'de': str = (de as I18nObj)[key] || key; break;\n      case 'en': str = (en as I18nObj)[key] || key; break;\n      case 'es': str = (es as I18nObj)[key] || key; break;\n      case 'fr': str = (fr as I18nObj)[key] || key; break;\n      case 'it': str = (it as I18nObj)[key] || key; break;\n      case 'nl': str = (nl as I18nObj)[key] || key; break;\n      case 'pl': str = (pl as I18nObj)[key] || key; break;\n      case 'pt': str = (pt as I18nObj)[key] || key; break;\n      case 'ru': str = (ru as I18nObj)[key] || key; break;\n      case 'zh-cn': str = (zhCn as I18nObj)[key] || key; break;\n      default: str = key;\n    }\n\n    return this.replacePlaceholders(str, ...args);\n  }\n\n  /**\n   * Replace `%s` placeholders in the given text.\n   * @param text The text.\n   * @param args Array of strings to be inserted at `%s` in the text.\n   */\n  private replacePlaceholders (text: string, ...args: string[]) : string {\n    for (const s of args) {\n      text = text.replace('%s', s);\n    }\n\n    return text;\n  }\n}\n\n/**\n * Singleton instance of the I18n class.\n */\nexport const i18n = new I18n();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAe;AACf,gBAAe;AACf,gBAAe;AACf,gBAAe;AACf,gBAAe;AACf,gBAAe;AACf,gBAAe;AACf,gBAAe;AACf,gBAAe;AACf,mBAAiB;AAQjB,MAAM,KAAK;AAAA,EAAX;AAKE,SAAO,WAA+B;AAKtC,SAAO,eAAwB;AAAA;AAAA,EAQ/B,AAAO,sBAAuB,QAAiB,MAA6C;AAC1F,QAAI,kBAAG,MAAM;AACX,aAAO;AAAA,QACL,IAAI,KAAK,oBAAqB,kBAAe,QAAQ,KAAK,GAAG,IAAI;AAAA,QACjE,IAAI,KAAK,oBAAqB,kBAAe,QAAQ,KAAK,GAAG,IAAI;AAAA,QACjE,IAAI,KAAK,oBAAqB,kBAAe,QAAQ,KAAK,GAAG,IAAI;AAAA,QACjE,IAAI,KAAK,oBAAqB,kBAAe,QAAQ,KAAK,GAAG,IAAI;AAAA,QACjE,IAAI,KAAK,oBAAqB,kBAAe,QAAQ,KAAK,GAAG,IAAI;AAAA,QACjE,IAAI,KAAK,oBAAqB,kBAAe,QAAQ,KAAK,GAAG,IAAI;AAAA,QACjE,IAAI,KAAK,oBAAqB,kBAAe,QAAQ,KAAK,GAAG,IAAI;AAAA,QACjE,IAAI,KAAK,oBAAqB,kBAAe,QAAQ,KAAK,GAAG,IAAI;AAAA,QACjE,IAAI,KAAK,oBAAqB,kBAAe,QAAQ,KAAK,GAAG,IAAI;AAAA,QACjE,SAAS,KAAK,oBAAqB,qBAAiB,QAAQ,KAAK,GAAG,IAAI;AAAA,MAC1E;AAAA,IACF,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAQA,AAAO,UAAW,QAAiB,MAAwB;AACzD,QAAI;AACJ,YAAQ,KAAK;AAAA,WACN;AAAM,cAAO,kBAAe,QAAQ;AAAK;AAAA,WACzC;AAAM,cAAO,kBAAe,QAAQ;AAAK;AAAA,WACzC;AAAM,cAAO,kBAAe,QAAQ;AAAK;AAAA,WACzC;AAAM,cAAO,kBAAe,QAAQ;AAAK;AAAA,WACzC;AAAM,cAAO,kBAAe,QAAQ;AAAK;AAAA,WACzC;AAAM,cAAO,kBAAe,QAAQ;AAAK;AAAA,WACzC;AAAM,cAAO,kBAAe,QAAQ;AAAK;AAAA,WACzC;AAAM,cAAO,kBAAe,QAAQ;AAAK;AAAA,WACzC;AAAM,cAAO,kBAAe,QAAQ;AAAK;AAAA,WACzC;AAAS,cAAO,qBAAiB,QAAQ;AAAK;AAAA;AAC1C,cAAM;AAAA;AAGjB,WAAO,KAAK,oBAAoB,KAAK,GAAG,IAAI;AAAA,EAC9C;AAAA,EAOA,AAAQ,oBAAqB,SAAiB,MAAyB;AACrE,eAAW,KAAK,MAAM;AACpB,aAAO,KAAK,QAAQ,MAAM,CAAC;AAAA,IAC7B;AAEA,WAAO;AAAA,EACT;AACF;AAKO,MAAM,OAAO,IAAI,KAAK;",
  "names": []
}
